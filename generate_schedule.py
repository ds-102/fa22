import sys
from typing import List

import pandas as pd

PREAMBLE = """
# This file contains the lectures and their associated information in
# chronological order. Note that the week and lecture numbers are automatically
# generated by the code in syllabus_entries.html.
#
# The schema for a lecture entry is:
#
#
# - date: Date of the lecture
#   topic: Title of the lecture
#   description: Longer description of lecture content
#   slides: url to the lecture slide
#   video: url for lecture video(s)
#   resources: markdown text for resources
#   lab: ...
#   discussion: ...
#   homework: ...
#   project: ...
"""

TOPICS = [
    "Course Overview, Making Decisions Under Uncertainty",
    "Binary Decision-Making",
    "P-Values and Multiple Hypothesis Testing",
    "Online False Discovery Rate Control & ROC curves",
    "Frequentist vs. Bayesian Decision-Making",
    "Overview of Bayesian Modeling",
    "Graphical Models",
    "Rejection Sampling and Markov Chains",
    "Markov Chain Monte Carlo (MCMC) and Gibbs Sampling",
    "Regression and GLMs",
    "Model checking for GLMs",
    "Uncertainty quantification for GLMs",
    "Midterm 1",
    "Nonparametric Methods and Neural Networks",
    "Neural Networks and Interpretability",
    "Causal Inference I, Problems with association",
    "Causal Inference II, Randomized experiments",
    "Causal Inference III, Observational studies",
    # "Spring Break",
    # "Spring Break",
    "Reinforcement Learning I",
    "Reinforcement Learning II",
    "Concentration inequalities",
    "Bandits I",
    "Bandits II",
    "Midterm 2",
    "Differential Privacy",
    "Robustness and Generalization",
    "Thanksgiving",
    "Matching Markets and Game Theory",
    "Course Wrap-up",
    # "Matching Markets, Game Theory, and Course Wrap-up",
 ]


def generate_schedule(start_date: str, end_date: str, topics: List[str]):
    days = pd.date_range(start_date, end_date)
    days = days[days.dayofweek.isin({1, 3})]
    num_days = len(days)
    num_topics = len(topics)
    if num_days != num_topics:
        raise ValueError(
            f"You gave {num_days} days and {num_topics} topics"
        )
    lectures = [PREAMBLE]
    for d, topic in zip(days, topics):
        date = d.strftime('%A %m/%d/%y')
        lectures.append(f"- date: {date}\n  topic: {topic}")
    lecture_yml = '\n\n'.join(lectures)
    with open('lectures.yml', 'w') as f:
        f.write(lecture_yml)


if __name__ == '__main__':
    generate_schedule(sys.argv[1], sys.argv[2], TOPICS)
    print("Generated lectures.yml. Check it and move to _data folder")
